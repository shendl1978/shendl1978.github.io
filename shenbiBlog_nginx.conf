
log_format  shenbiBlog  '{"ip":"$remote_addr","logTime":"$time_iso8601","logLevel":"info","logApp":"shenbiBlog","logName":"$request","args":"$args","logVersion":"1.0.0",'
    '"userAgent":"$http_user_agent", "upstream_addr":"$upstream_addr","status":"$status","body_bytes_sent":"$body_bytes_sent",'
     '"http_referer":"$http_referer","http_x_forwarded_for":"$http_x_forwarded_for"} ';
#https
server {
    #SSL 访问端口号为 443
    listen *:443 ssl ;
       listen       [::]:443 ssl;
 #填写绑定证书的域名
    server_name www.shenbi.xyz   shenbi.xyz;
       charset  utf-8;
            client_max_body_size  256M;
 #证书文件名称
    ssl_certificate "/opt/program/trustSsl/shenbi.xyz/Nginx/1_shenbi.xyz_bundle.crt";
 #私钥文件名称
    ssl_certificate_key "/opt/program/trustSsl/shenbi.xyz/Nginx/2_shenbi.xyz.key";
    ssl_session_timeout 10m;
 #请按照以下协议配置
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
 #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
    ssl_prefer_server_ciphers on;
     # path for static files
  ####################vouch proxy
  # send all requests to the `/validate` endpoint for authorization
    #auth_request /validate;

     #  location = /validate {
      # forward the /validate request to Vouch Proxy
    #  proxy_pass http://127.0.0.1:9090/validate;
      # be sure to pass the original host header
    #  proxy_set_header Host $http_host;

      # Vouch Proxy only acts on the request headers
    #  proxy_pass_request_body off;
   #   proxy_set_header Content-Length "";

      # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
     # auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

      # optionally add X-Vouch-IdP-Claims-* custom claims you are tracking
      #    auth_request_set $auth_resp_x_vouch_idp_claims_groups $upstream_http_x_vouch_idp_claims_groups;
      #    auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;
      # optinally add X-Vouch-IdP-AccessToken or X-Vouch-IdP-IdToken
      #    auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;
      #    auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;

      # these return values are used by the @error401 call
     # auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
     # auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
    #  auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;

      # Vouch Proxy can run behind the same Nginx reverse proxy
      # may need to comply to "upstream" server naming
      # proxy_pass http://vouch.yourdomain.com/validate;
      # proxy_set_header Host $http_host;
    #}

    # if validate returns `401 not authorized` then forward the request to the error401block
    #error_page 401 = @error401;

    #location @error401 {
        # redirect to Vouch Proxy for login
    #    return 302 https://vouch.yourdomain.com/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
        # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
        # but to get started you can just forward the end user to the port that vouch is running on
        # return 302 http://vouch.yourdomain.com:9090/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    #}

  ###############
   #recursive_error_pages on;
  #变量可以传递
  #  error_page 501 = @proxy_shenbiWebServer;

    #webserver api
     location /webserver/remote_addr {
       add_header Access-Control-Allow-Origin *;
       default_type text/html ;
         return 200   '$remote_addr';

     }
  location /webserver/publicip {
      add_header Access-Control-Allow-Origin *;
       default_type text/html ;
         return 200   '$remote_addr';

     }
   location /webserver/nginx_version {
       default_type text/html ;
         return 200   '$nginx_version';

     }
  location /webserver/version {
       default_type text/html ;
         return 200   '$nginx_version';

     }
    location /webserver/http_header {
       default_type text/html ;
         return 200   '$http_HEADER';

     }
    location /webserver/header {
       default_type text/html ;
         return 200   '$http_HEADER';

     }


  location /webserver/request_time {
    add_header Access-Control-Allow-Origin *;
       default_type text/html ;
         return 200   '$request_time';

     }
  location /webserver/log {
          default_type application/json ;
          return 200   '{"ip":"$remote_addr","logTime":"$time_iso8601","logLevel":"info","logApp":"shenbiBlog","logName":"$request","args":"$args","logVersion":"1.0.0", "userAgent":"$http_user_agent", "upstream_addr":"$upstream_addr","status":"$status","body_bytes_sent":"$body_bytes_sent","http_referer":"$http_referer","http_x_forwarded_for":"$http_x_forwarded_for"} ';
        }


    root /opt/program/shenbi-blog-v2/themes/showcase/shendl1978.github.com/docs/;

      location / {
      # index   welcome.html   welcome.htm;
      # match root, if not found proxy to app
      try_files $uri  $uri/index.html  =404;
        #todo
     gzip_static on; #静态压缩
        index index.html index.htm;
    }




  error_page 404 /404.html;
        location = /404.html {
         }

         error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }
  error_log    /opt/program/shenbi-blog-v2/logs/error_shenbiWebServer.log    error;

      access_log    /opt/program/shenbi-blog-v2/logs/access_shenbiWebServer.log    shenbiBlog buffer=64k flush=1m;

 open_log_file_cache max=1000 inactive=20s valid=1m min_uses=1;

}



#http
server {
  # listen       8000
  #监听所有 IP。 域名和IP不匹配时，用这个。
             listen       *:80  default_server ;
               #IPv6
               listen       [::]:80 default_server ;
            server_name www.shenbi.xyz  shenbi.xyz ;
            #server_name _;
          #  charset  utf-8;
        #    client_max_body_size  256M;
#            location / {try_files $uri @app; }
  # path for static files
   # root /opt/program/shenbiWebServer/public;

    location / {
      return 301 https://$http_host$request_uri;
      # match root, if not found proxy to app
     # try_files $uri @proxy_shenbiWebServer;
        #todo
    #  index  index.html index.htm;
    }


}
